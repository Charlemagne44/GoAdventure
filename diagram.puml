@startuml class_diagram
protocol   Controller {
    --Attributes--
    + Model model
    + View view
    --Functions--
    + void loop() : sends commands to model / view
}
note right of Controller::loop
    The main loop of the program that
    prints options, takes input, and
    sends to view / model
end note
class   View {
    --Functions--
    + void printOptions()
}
note right of View::printOptions
    Prints all the viable options
    depending on the player location
    and items that may be there
end note
class   Model {
    --Attributes--
    - World world
    --Methods--
    + void directControllerInput()
    + void initialize()
}
note right of Model::directControllerInput
    Takes command from controller 
    and directs to proper model
    methods
end note

class World {
    --Attributes--
    - []Location locations
    - Location currLocation
    --Methods--
    + Location getCurrLocation()
    + Location setCurrLocation(*location currLocName, *location newLocName)
    /'- void createLocation(string filename)'/
    + void initializeLocations(string filePath)
}
note right of World::createLocations
    Takes JSON input to create locations
    for the worlds to be used
end note

class Location {
    --Attributes--
    - string name 
    - []string neighbors
    --Methods--
    + string getName()
    + []string getNeighbors(string loc)
    + bool checkIfNeighbor(currLoc *location, newLoc *location)

}

Controller <-- Model : controls >
Controller <-- View : controls >
Model <-- World : contains
World <-- Location : contains
World::setCurrLocation <-- Location::checkIfNeighbor


@enduml