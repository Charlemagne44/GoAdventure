@startuml class_diagram
protocol   Controller {
    --Attributes--
    + Model Model
    + View View
    --Functions--
    + void loop() : sends commands to model / view
    + string determineCommand(string command)
}
note right of Controller::loop
    The main loop of the program that
    prints options, takes input, and
    sends to view / model
end note
note right of Controller::determineCommand
    This will return a string determining
    if the command should be sent to model or view
end note

class   View {
    --Functions--
    + void PrintOptions()
}
note right of View::PrintOptions
    Prints all the viable options
    depending on the player location
    and items that may be there
end note

class   Model {
    --Attributes--
    - World World
    --Methods--
    + void DirectControllerInput()
    + void Intialize()
    + (string x 3) Parse(string raw)
    - (bool, error) checkType(word, filename string)
}
note right of Model::DirectControllerInput
    Takes command from controller 
    and directs to proper model
    methods
end note

class World {
    --Attributes--
    - []Location Locations
    - Location CurrLocation
    --Methods--
    + Location GetCurrLocation()
    + Location SetCurrLocation(*location currLocName, *location newLocName)
    + void Intialize(w *World, string worldFile)
    - void initializeLocations(w *World, string filePath)
    - map[string]Location createLocationMaps(w *World, []Location locs)
}
note right of World::initializeLocations
    Takes JSON input to create locations
    for the world to be store
end note

class Location {
    --Attributes--
    - string Name 
    - []string Neighbors
    --Methods--
    + string GetName()
    + []string GetNeighbors(string loc)
    + bool CheckIfNeighbor(currLoc *location, newLoc *location)
}

annotation Resources {
    --Files--
    - json World: Contains all locations
}

Controller <-- Model : controls >
Controller <-- View : controls >
Model <-- World : contains
World <-- Location : contains
World::SetCurrLocation <-- Location::CheckIfNeighbor : uses <


@enduml